name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

jobs:
  build-wasm:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build WASM files
        uses: docker/build-push-action@v5
        with:
          context: .
          target: export-stage
          outputs: type=local,dest=./wasm
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Fix worker import paths
        run: |
          for file in ./wasm/*.js; do
            filename=$(basename "$file")
            echo "Fixing $filename"
            node -e "
          const fs = require('fs');
          const content = fs.readFileSync('$file', 'utf8');
          fs.writeFileSync('$file', content.replace(/$filename/g, ''));
          "
          done

      - name: Upload WASM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: whisper-wasm-files
          path: wasm/
          retention-days: 30

  test:
    runs-on: ubuntu-latest
    needs: build-wasm

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download WASM artifacts
        uses: actions/download-artifact@v4
        with:
          name: whisper-wasm-files
          path: wasm/

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      # - name: Run tests
      #   run: npm test

      - name: Build project
        run: npm run build

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '20.x'
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  deploy-demo:
    runs-on: ubuntu-latest
    needs: [test, build-wasm]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download WASM artifacts
        uses: actions/download-artifact@v4
        with:
          name: whisper-wasm-files
          path: wasm/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build library
        run: npm run build:lib

      - name: Build demo
        run: npm run build:demo:github

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: demo-dist/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  publish-canary:
    runs-on: ubuntu-latest
    needs: [test, build-wasm]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
    outputs:
      canary-version: ${{ steps.prepare_canary.outputs.canary-version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Download WASM artifacts
        uses: actions/download-artifact@v4
        with:
          name: whisper-wasm-files
          path: wasm/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 30

      - name: Install dependencies
        run: npm ci

      - name: Prepare Canary Version
        id: prepare_canary
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Get short commit hash
          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "Commit hash: $COMMIT_HASH"

          # Create canary version
          CANARY_VERSION="${CURRENT_VERSION}-canary.${COMMIT_HASH}"
          echo "Canary version: $CANARY_VERSION"
          echo "canary-version=$CANARY_VERSION" >> $GITHUB_OUTPUT

          # Update package.json with canary version
          npm version $CANARY_VERSION --no-git-tag-version
          echo "Updated package.json with canary version"

      - name: Publish Canary to NPM
        run: npm publish --tag canary
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  create-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Download WASM artifacts
        uses: actions/download-artifact@v4
        with:
          name: whisper-wasm-files
          path: wasm/

      - name: Install dependencies
        run: npm ci

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.release.tag_name }}
          release_name: ${{ github.event.release.name }}
          body: ${{ github.event.release.body }}
          draft: ${{ github.event.release.draft }}
          prerelease: ${{ github.event.release.prerelease }}

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
